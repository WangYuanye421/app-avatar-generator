import { appConfig } from './config';

interface Env {
	AI: Ai;
	APP_KV: KVNamespace;
	MAX_REQUESTS_PER_DAY: string;
	MAX_RANDOM_DESC_PER_DAY: string;
}

// ‰ªéÈÖçÁΩÆ‰∏≠ÊèêÂèñÈ£éÊ†ºÊèèËø∞Êò†Â∞Ñ
const styleDescriptions: Record<string, string> = {};
appConfig.styles.forEach(style => {
	styleDescriptions[style.value] = style.description;
});

const html = `
<!DOCTYPE html>
<html>
<head>
	<title>AI Èùì‰ªîÂ§¥ÂÉè</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<style>
		:root {
			--primary-color: #6366F1;
			--primary-light: #818CF8;
			--primary-dark: #4F46E5;
			--secondary-color: #10B981;
			--background-dark: #f3e6f0;
			--background-light: #f2f1ea;
			--text-primary: #1f2937;
			--text-secondary: #4b5563;
			--card-bg: #ffffff;
			--border-color: #e0e0e0;
		}
		html, body {
			height: 100%;
			margin: 0;
		}
		body {
			font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
			background: linear-gradient(135deg, #f3e6f0, #f2f1ea);
			color: var(--text-primary);
			min-height: 100vh;
			height: 100%;
			overflow: hidden;
		}
		.app-layout {
			display: flex;
			flex-direction: column;
			height: 100vh;
			max-width: 1200px;
			margin: 0 auto;
			padding: 1rem;
			box-sizing: border-box;
		}
		.app-header {
			text-align: center;
			padding: 1rem;
			margin-bottom: 1rem;
			flex-shrink: 0;
		}
		.app-header h1 {
			font-size: 1.8rem;
			margin: 0;
			background: linear-gradient(to right, #ff00c7, #ff9900);
			-webkit-background-clip: text;
			background-clip: text;
			color: transparent;
			font-weight: 700;
		}
		.controls-section {
			background-color: var(--card-bg);
			border-radius: 1rem;
			padding: 0.75rem;
			margin-bottom: 0.75rem;
			box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
			border: 1px solid var(--border-color);
			flex-shrink: 0;
		}
		.input-grid {
			display: grid;
			grid-template-columns: 1fr 1fr;
			gap: 0.75rem;
			margin-bottom: 0.75rem;
		}
		.input-group label {
			display: block;
			margin-bottom: 0.75rem;
			font-weight: 500;
			font-size: 1rem;
			color: var(--text-secondary);
		}
		.label-with-button {
			display: flex;
			align-items: center;
			justify-content: space-between;
		}
		.inline-random-btn {
			margin-right: 0.5rem;
		}
		.style-description {
			font-size: 0.85rem;
			color: #888;
			margin-top: 0.5rem;
			min-height: 2.5em;
		}
		select, input, textarea {
			width: 100%;
			padding: 0.85rem 1rem;
			border-radius: 0.75rem;
			border: 1px solid var(--border-color);
			background-color: rgba(255, 255, 255, 0.7);
			color: var(--text-primary);
			font-size: 1rem;
			box-sizing: border-box;
			transition: all 0.2s ease;
		}
		select:focus, input:focus, textarea:focus {
			outline: none;
			border-color: var(--primary-color);
			box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.3);
		}
		textarea {
			min-height: 80px;
			resize: vertical;
		}
		.inline-random-btn {
			background: rgba(255, 255, 255, 0.7);
			color: var(--text-secondary);
			border: 1px solid var(--border-color);
			border-radius: 0.5rem;
			padding: 0.25rem 0.5rem;
			font-size: 0.85rem;
			cursor: pointer;
			transition: all 0.2s ease;
			margin-right: 0.5rem;
			width: auto;
			min-width: 60px;
		}
		.inline-random-btn:hover {
			background: rgba(240, 240, 240, 0.7);
			color: var(--text-primary);
		}
		.button-grid {
			display: grid;
			grid-template-columns: 1fr;
			gap: 0.75rem;
			flex-shrink: 0;
		}
		button {
			width: 100%;
			padding: 1rem 1.25rem;
			border-radius: 0.75rem;
			border: none;
			cursor: pointer;
			font-weight: 600;
			font-size: 1.1rem;
			box-sizing: border-box;
			transition: all 0.2s ease;
			display: flex;
			justify-content: center;
			align-items: center;
			gap: 0.75rem;
		}
		button:active { transform: scale(0.98); }
		#generate-btn {
			background: linear-gradient(to right, #ff00c7, #ff9900);
			color: white;
			box-shadow: 0 4px 15px rgba(255, 0, 199, 0.3);
		}
		#generate-btn:hover { 
			background: linear-gradient(to right, #e000b0, #e68a00);
			box-shadow: 0 6px 20px rgba(255, 0, 199, 0.4);
		}
		.preview-section {
			flex: 2;
			display: flex;
			justify-content: center;
			align-items: center;
			margin-bottom: 1rem;
			overflow: hidden;
		}
		.image-container {
			width: 100%;
			max-width: 100%;
			text-align: center;
			flex: 2;
			display: flex;
			flex-direction: column;
			min-height: 0;
		}
		.image-wrapper {
			position: relative;
			display: flex;
			width: 100%;
			border-radius: 1rem;
			overflow: hidden;
			box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
			border: 1px solid var(--border-color);
			background-color: var(--card-bg);
			min-height: 320px;
			height: 100%;
			max-height: 320px;
			align-items: center;
			justify-content: center;
			flex: 1;
		}
		.image-content {
			width: 100%;
			height: 100%;
			display: flex;
			align-items: center;
			justify-content: center;
		}
		.placeholder-text {
			color: var(--text-secondary);
			font-size: 1rem;
			padding: 1rem;
		}
		.style-preview-overlay {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background: rgba(0, 0, 0, 0.6);
			display: flex;
			align-items: center;
			justify-content: center;
			z-index: 10;
			color: white;
			font-size: 1.5rem;
			font-weight: bold;
			text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
		}
		img {
			max-width: 100%;
			max-height: 100%;
			display: block;
			object-fit: contain;
		}
		.hidden { display: none; }
		.spinner {
			width: 50px;
			height: 50px;
			border: 5px solid rgba(255, 0, 199, 0.2);
			border-top: 5px solid #ff00c7;
			border-radius: 50%;
			animation: spin 1s linear infinite;
		}
		@keyframes spin { 
			0% { transform: rotate(0deg); } 
			100% { transform: rotate(360deg); } 
		}
		.download-btn {
			position: absolute;
			top: 16px;
			right: 16px;
			width: 48px;
			height: 48px;
			border-radius: 50%;
			background-color: rgba(255, 255, 255, 0.8);
			color: var(--text-primary);
			padding: 0;
			border: 1px solid var(--border-color);
			backdrop-filter: blur(4px);
		}
		.download-btn:hover { 
			background-color: rgba(240, 240, 240, 0.9);
			transform: scale(1.05);
		}
		#share-app-btn {
			position: fixed;
			bottom: 1.5rem;
			right: 1.5rem;
			width: 60px;
			height: 60px;
			border-radius: 50%;
			background: linear-gradient(to right, #ff00c7, #ff9900);
			color: white;
			box-shadow: 0 6px 20px rgba(255, 0, 199, 0.4);
			cursor: pointer;
			display: flex;
			align-items: center;
			justify-content: center;
			border: none;
			transition: all 0.2s ease;
		}
		#share-app-btn:hover { 
			transform: scale(1.1);
			box-shadow: 0 8px 25px rgba(255, 0, 199, 0.5);
		}
		button svg { 
			stroke: currentColor; 
			width: 24px;
			height: 24px;
		}
		.footer {
			text-align: center;
			padding: 1.5rem;
			color: var(--text-secondary);
			font-size: 0.9rem;
		}
		@media (max-width: 768px) {
			.input-grid {
				grid-template-columns: 1fr;
			}
			.button-grid {
				grid-template-columns: 1fr;
			}
			.app-header h1 {
				font-size: 1.5rem;
			}
		}
	</style>
</head>
<body>
	<div class="app-layout">
		<header class="app-header">
			<h1>AI Èùì‰ªîÂ§¥ÂÉè</h1>
		</header>

		<section class="controls-section">
			<div class="input-grid">
				<div class="input-group">
					<label for="style">È£éÊ†º</label>
					<select id="style">
						${appConfig.styles.map(style => `<option value="${style.value}">${style.label}</option>`).join('')}
					</select>
					<div id="style-description" class="style-description">${appConfig.styles[0].description}</div>
				</div>
				<div class="input-group">
					<div class="label-with-button">
						<label for="prompt" class="label-text">ÊèèËø∞</label>
						<button id="inline-random-btn" class="inline-random-btn">üé≤ ÈöèÊú∫</button>
					</div>
					<textarea id="prompt" placeholder="‰æãÂ¶ÇÔºöÂèØÁà±ÁöÑÊú∫Âô®‰∫∫„ÄÅÂãáÊï¢ÁöÑÈ™ëÂ£´„ÄÅÁ•ûÁßòÁöÑÊ≥ïÂ∏à..."></textarea>
				</div>
			</div>
			
			<section class="preview-section">
				<div class="image-container">
					<div class="image-wrapper">
						<div id="placeholder" class="placeholder-text">ÁîüÊàêÁöÑÂ§¥ÂÉèÂ∞ÜÊòæÁ§∫Âú®ËøôÈáå</div>
						<div id="spinner" class="spinner hidden"></div>
						<div class="image-content hidden">
							<img id="image" src="" alt="ÁîüÊàêÁöÑÂ§¥ÂÉè">
							<div id="style-preview-overlay" class="style-preview-overlay hidden">È£éÊ†ºÈ¢ÑËßà</div>
							<button id="download-btn" class="download-btn" title="‰∏ãËΩΩÂõæÁâá"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line></svg></button>
						</div>
					</div>
				</div>
			</section>
			
			<div class="button-grid">
				<button id="generate-btn"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"/></svg> ÁîüÊàê</button>
			</div>
		</section>

		<button id="share-app-btn" title="ÂàÜ‰∫´Â∫îÁî®"><svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="18" cy="5" r="3"></circle><circle cx="6" cy="12" r="3"></circle><circle cx="18" cy="19" r="3"></circle><line x1="8.59" y1="13.51" x2="15.42" y2="17.49"></line><line x1="15.41" y1="6.51" x2="8.59" y2="10.49"></line></svg></button>

	<script>
		const resultDiv = document.getElementById('result');
		const spinner = document.getElementById('spinner');
		const imageWrapper = document.querySelector('.image-wrapper');
		const imageContent = document.querySelector('.image-content');
		const image = document.getElementById('image');
		const downloadBtn = document.getElementById('download-btn');
		const shareBtn = document.getElementById('share-app-btn');
		const placeholder = document.getElementById('placeholder');
		const stylePreviewOverlay = document.getElementById('style-preview-overlay');
		
		const styleSelect = document.getElementById('style');
		const promptInput = document.getElementById('prompt');
		const generateBtn = document.getElementById('generate-btn');
		const inlineRandomBtn = document.getElementById('inline-random-btn');
		const styleDescription = document.getElementById('style-description');

		let imageUrl = '';

		// È£éÊ†ºÊèèËø∞Êò†Â∞Ñ
		const styleDescriptions = ${JSON.stringify(styleDescriptions)};

		// Êõ¥Êñ∞È£éÊ†ºÊèèËø∞
		function updateStyleDescription() {
			const selectedStyle = styleSelect.value;
			styleDescription.textContent = styleDescriptions[selectedStyle] || '';
			
			// ÊòæÁ§∫È£éÊ†ºÈ¢ÑËßàÔºàÂ¶ÇÊûúÂ∑≤ÈÖçÁΩÆÔºâ
			const styleConfig = appConfig.styles.find(s => s.value === selectedStyle);
			if (styleConfig && styleConfig.previewImage) {
				// Â¶ÇÊûúÊúâÈ¢ÑËßàÂõæURLÔºåÂàôÊòæÁ§∫È¢ÑËßàÂõæ
				const previewImage = new Image();
				previewImage.onload = function() {
					image.src = styleConfig.previewImage;
					imageContent.classList.remove('hidden');
					placeholder.classList.add('hidden');
					stylePreviewOverlay.classList.remove('hidden');
				};
				previewImage.src = styleConfig.previewImage;
			} else {
				// Â¶ÇÊûúÊ≤°ÊúâÈ¢ÑËßàÂõæÔºåÂàôÈöêËóèÈ¢ÑËßàÈÅÆÁΩ©
				stylePreviewOverlay.classList.add('hidden');
			}
		}

		// ÂàùÂßãÂåñÈ£éÊ†ºÊèèËø∞
		updateStyleDescription();

		// È£éÊ†ºÈÄâÊã©ÂèòÂåñÊó∂Êõ¥Êñ∞ÊèèËø∞
		styleSelect.addEventListener('change', updateStyleDescription);

		generateBtn.addEventListener('click', async () => {
			const style = styleSelect.value;
			const prompt = promptInput.value || 'random character';
			let fullPrompt = '';
			
			// Â¶ÇÊûúÈÄâÊã©‰∫Ü"Êó†È£éÊ†ºÔºåËá™Áî±ÊèèËø∞"ÈÄâÈ°πÔºåÂàô‰∏çÊ∑ªÂä†È£éÊ†ºÂêéÁºÄ
			if (style === 'none') {
				fullPrompt = prompt;
			} else {
				fullPrompt = prompt + ', ' + style + ' style';
			}
			
			await generateImage(fullPrompt);
		});

		// Êñ∞Â¢ûÁöÑË°åÂÜÖÈöèÊú∫ÊåâÈíÆ‰∫ã‰ª∂
		inlineRandomBtn.addEventListener('click', async (e) => {
			e.preventDefault();
			const style = styleSelect.value;
			inlineRandomBtn.disabled = true;
			inlineRandomBtn.textContent = 'ÁîüÊàê‰∏≠...';
			
			try {
				const response = await fetch('/api/random-prompt', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ style }),
				});
				
				if (response.ok) {
					const data = await response.json();
					const prompt = data.prompt;
					promptInput.value = prompt;
				} else if (response.status === 429) {
					const error = await response.json();
					alert(error.error || 'Â∑≤Ë∂ÖÂá∫ÈöèÊú∫ÊèèËø∞ÁîüÊàêÊ¨°Êï∞ÈôêÂà∂ÔºåËØ∑ÊòéÂ§©ÂÜçËØï„ÄÇ');
				} else {
					const error = await response.json();
					alert(error.error || 'ÁîüÊàêÊèêÁ§∫ËØçÊó∂Âá∫Èîô');
				}
			} catch (err) {
				console.error(err);
				alert('ÁîüÊàêÊèêÁ§∫ËØçÊó∂ÂèëÁîüÈîôËØØ„ÄÇ');
			} finally {
				inlineRandomBtn.disabled = false;
				inlineRandomBtn.innerHTML = 'üé≤ ÈöèÊú∫';
			}
		});

		async function generateImage(prompt) {
			placeholder.classList.add('hidden');
			spinner.classList.remove('hidden');
			imageContent.classList.add('hidden');
			stylePreviewOverlay.classList.add('hidden'); // ÈöêËóèÈ£éÊ†ºÈ¢ÑËßà
			
			// ÊòæÁ§∫Ê≠£Âú®Â§ÑÁêÜÁöÑÊèêÁ§∫
			placeholder.textContent = 'Ê≠£Âú®Â§ÑÁêÜÊèêÁ§∫ËØç...';
			placeholder.classList.remove('hidden');

      // ÂàõÂª∫Âπ∂Ê∑ªÂä†ÁøªËØëÊèêÁ§∫ÂÖÉÁ¥†
      let translationHint = document.getElementById('translation-hint');
      if (!translationHint) {
        translationHint = document.createElement('div');
        translationHint.id = 'translation-hint';
        translationHint.style.cssText = 'position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: rgba(0, 0, 0, 0.8); color: white; padding: 10px 20px; border-radius: 8px; z-index: 5; font-size: 14px; text-align: center;';
        translationHint.classList.add('hidden');
        imageWrapper.appendChild(translationHint);
      }

			try {
        // Ê£ÄÊü•ÊèêÁ§∫ËØçÊòØÂê¶ÂåÖÂê´‰∏≠ÊñáÂ≠óÁ¨¶
        const hasChinese = /[\u4e00-\u9fa5]/.test(prompt);
        
        // Â¶ÇÊûúÂåÖÂê´‰∏≠ÊñáÔºåÊòæÁ§∫ÁøªËØëÊèêÁ§∫
        if (hasChinese) {
          translationHint.textContent = 'Ê≠£Âú®ÁøªËØëÊèêÁ§∫ËØç...';
          translationHint.classList.remove('hidden');
        }

				const response = await fetch('/api/generate', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ prompt }),
				});

				if (response.ok) {
					const blob = await response.blob();
					imageUrl = URL.createObjectURL(blob);
					image.src = imageUrl;
					imageContent.classList.remove('hidden');
					placeholder.classList.add('hidden');
				} else if (response.status === 429) {
					const error = await response.json();
					alert(error.error || 'Â∑≤Ë∂ÖÂá∫‰ΩøÁî®Ê¨°Êï∞ÈôêÂà∂ÔºåËØ∑ÊòéÂ§©ÂÜçËØï„ÄÇ');
				} else {
					const error = await response.json();
					alert(error.error);
				}
			} catch (err) {
				console.error(err);
				alert('ÁîüÊàêÂõæÁâáÊó∂ÂèëÁîüÈîôËØØ„ÄÇ');
			} finally {
				spinner.classList.add('hidden');
        translationHint.classList.add('hidden'); // Á°Æ‰øùÊúÄÁªàÈöêËóè
			}
		}

		downloadBtn.addEventListener('click', () => {
			const a = document.createElement('a');
			a.href = imageUrl;
			a.download = 'avatar.png';
			document.body.appendChild(a);
			a.click();
			document.body.removeChild(a);
		});

		shareBtn.addEventListener('click', () => {
			if (navigator.share) {
				navigator.share({
					title: 'AI Â§¥ÂÉèÁîüÊàêÂô®',
					text: 'Âø´Êù•ÁúãÁúãËøô‰∏™ AI Â§¥ÂÉèÁîüÊàêÂô®ÔºÅ',
					url: window.location.href,
				}).catch(console.error);
			} else {
				navigator.clipboard.writeText(window.location.href).then(() => {
					alert('ÈìæÊé•Â∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥ÊùøÔºÅ');
				});
			}
		});
	</script>
</body>
</html>
`;

export default {
	async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {
		const url = new URL(request.url);
		const path = url.pathname;

		if (path === '/') {
			return new Response(html, {
				headers: {
					'Content-Type': 'text/html',
				},
			});
		}

		if (path === '/api/generate') {
			const requestData = await request.json() as { prompt: string };
			const { prompt } = requestData;

			const maxRequests = parseInt(env.MAX_REQUESTS_PER_DAY, 10);
			const ip = request.headers.get('CF-Connecting-IP') || 'unknown';
			const userAgent = request.headers.get('User-Agent') || 'unknown';
			const key = `rate_limit:${ip}:${userAgent}`;

			const rateLimitData = await env.APP_KV.get(key, { type: 'json' });
			const { count = 0, timestamp = Date.now() } = (rateLimitData || {}) as { count: number; timestamp: number };

			const isNewDay = new Date().setHours(0, 0, 0, 0) > new Date(timestamp).setHours(0, 0, 0, 0);

			if (isNewDay) {
				await env.APP_KV.put(key, JSON.stringify({ count: 1, timestamp: Date.now() }), {
					expirationTtl: 86400,
				});
			} else if (count >= maxRequests) {
				return new Response(
					JSON.stringify({
						error: 'Â∑≤Ë∂ÖÂá∫‰ΩøÁî®Ê¨°Êï∞ÈôêÂà∂ÔºåËØ∑ÊòéÂ§©ÂÜçËØï„ÄÇ',
					}),
					{
						status: 429,
						headers: { 'Content-Type': 'application/json' },
					}
				);
			} else {
				await env.APP_KV.put(key, JSON.stringify({ count: count + 1, timestamp }), {
					expirationTtl: 86400,
				});
			}

			const inputs = {
				prompt: `${prompt}, character portrait, standalone character, high quality, detailed face, ((best quality)), ((masterpiece)), sharp focus, 1:1 ratio, PNG format`,
				negative_prompt: "interior design, room, furniture, architecture, building, indoor, home, office, ((nsfw)), sketch, drawing, painting, low quality, blurry, deformed, ugly, messy, bad anatomy, bad hands, bad eyes, bad face, low resolution, extra limbs, bad proportions, duplicate, cropped, worst quality, multiple views, background, scenery, landscape, cityscape"
			};
			
			// Ê£ÄÊü•ÊèêÁ§∫ËØçÊòØÂê¶ÂåÖÂê´‰∏≠ÊñáÂ≠óÁ¨¶
			const hasChinese = /[\u4e00-\u9fa5]/.test(prompt);
			let finalPrompt = prompt;
			
			// Â¶ÇÊûúÂåÖÂê´‰∏≠ÊñáÔºå‰ΩøÁî®LLMÂ∞Ü‰∏≠ÊñáÊèêÁ§∫ËØçÁøªËØë‰∏∫Ëã±Êñá
			if (hasChinese) {
				try {
					const translationMessages = [
						{
							role: "system",
							content: "‰Ω†ÊòØ‰∏Ä‰∏™‰∏ì‰∏öÁöÑAIÂõæÂÉèÁîüÊàêÊèêÁ§∫ËØçÁøªËØë‰∏ìÂÆ∂„ÄÇ‰Ω†ÁöÑ‰ªªÂä°ÊòØÂ∞Ü‰∏≠ÊñáÊèêÁ§∫ËØçÁøªËØëÊàêËã±ÊñáÔºå‰øùÊåÅÂéüÊÑèÂπ∂‰ºòÂåñ‰∏∫ÈÄÇÂêàStable DiffusionÊ®°ÂûãÁêÜËß£ÁöÑËã±ÊñáÊèêÁ§∫ËØç„ÄÇÂè™ÈúÄË¶ÅËæìÂá∫ÁøªËØëÂêéÁöÑËã±ÊñáÊèêÁ§∫ËØçÔºå‰∏çË¶ÅÊ∑ªÂä†‰ªª‰ΩïÂÖ∂‰ªñÂÜÖÂÆπ„ÄÇ"
						},
						{
							role: "user",
							content: `ËØ∑Â∞Ü‰ª•‰∏ã‰∏≠ÊñáÊèêÁ§∫ËØçÁøªËØë‰∏∫Ëã±ÊñáÔºö${prompt}`
						}
					];
					
					const translationResponse = await env.AI.run(
						'@cf/meta/llama-3.1-8b-instruct',
						{ messages: translationMessages }
					);
					
					finalPrompt = translationResponse.response || prompt;
				} catch (translationError) {
					console.error('ÁøªËØëÊèêÁ§∫ËØçÊó∂Âá∫Èîô:', translationError);
					// Â¶ÇÊûúÁøªËØëÂ§±Ë¥•ÔºåÁªßÁª≠‰ΩøÁî®ÂéüÂßãÊèêÁ§∫ËØç
				}
				
				// Êõ¥Êñ∞ËæìÂÖ•ÊèêÁ§∫ËØç
				inputs.prompt = `${finalPrompt}, character portrait, standalone character, high quality, detailed face, ((best quality)), ((masterpiece)), sharp focus, 1:1 ratio, PNG format`;
			}
			
			try {
				const response = await env.AI.run(
					'@cf/stabilityai/stable-diffusion-xl-base-1.0',
					inputs
				);
				return new Response(response, {
					headers: {
						'content-type': 'image/png',
					},
				});
			} catch (e) {
				return new Response(JSON.stringify({ error: 'ÁîüÊàêÂõæÁâáÊó∂ÂèëÁîüÈîôËØØ' }), {
					status: 500,
					headers: { 'Content-Type': 'application/json' },
				});
			}
		}

		if (path === '/api/random-prompt') {
			const requestData = await request.json() as { style: string };
			const { style } = requestData;

			const maxRequests = parseInt(env.MAX_RANDOM_DESC_PER_DAY, 10);
			const ip = request.headers.get('CF-Connecting-IP') || 'unknown';
			const userAgent = request.headers.get('User-Agent') || 'unknown';
			const key = `random_desc_limit:${ip}:${userAgent}`;

			const rateLimitData = await env.APP_KV.get(key, { type: 'json' });
			const { count = 0, timestamp = Date.now() } = (rateLimitData || {}) as { count: number; timestamp: number };

			const isNewDay = new Date().setHours(0, 0, 0, 0) > new Date(timestamp).setHours(0, 0, 0, 0);

			if (isNewDay) {
				await env.APP_KV.put(key, JSON.stringify({ count: 1, timestamp: Date.now() }), {
					expirationTtl: 86400,
				});
			} else if (count >= maxRequests) {
				return new Response(
					JSON.stringify({
						error: 'Â∑≤Ë∂ÖÂá∫ÈöèÊú∫ÊèèËø∞ÁîüÊàêÊ¨°Êï∞ÈôêÂà∂ÔºåËØ∑ÊòéÂ§©ÂÜçËØï„ÄÇ',
					}),
					{
						status: 429,
						headers: { 'Content-Type': 'application/json' },
					}
				);
			} else {
				await env.APP_KV.put(key, JSON.stringify({ count: count + 1, timestamp }), {
					expirationTtl: 86400,
				});
			}

			let prompt;
			const styleConfig = appConfig.styles.find(s => s.value === style);
			const styleName = styleConfig?.label;
			const styleDescription = styleConfig?.description || '';

			// Ê†πÊçÆÊòØÂê¶ÈÄâÊã©"Êó†È£éÊ†º"‰ΩøÁî®‰∏çÂêåÁöÑÊèêÁ§∫Á≠ñÁï•
			const isNoneStyle = style === 'none';
			const systemPrompt = isNoneStyle 
				? "‰Ω†ÊòØ‰∏Ä‰ΩçÂØåÊúâÊÉ≥Ë±°ÂäõÁöÑËâ∫ÊúØÂÆ∂ÔºåÊìÖÈïøÂàõÈÄ†Áã¨Áâπ‰∏îÂºï‰∫∫Ê≥®ÁõÆÁöÑËßíËâ≤Ê¶ÇÂøµ„ÄÇËØ∑ÁîüÊàê‰∏Ä‰∏™Áî®‰∫éAIÂ§¥ÂÉèÁîüÊàêÁöÑÁÆÄÁü≠‰∏≠ÊñáÊèèËø∞„ÄÇË¶ÅÊ±ÇÔºö1. ‰ªÖËæìÂá∫Á∫ØÊñáÊú¨ÊèèËø∞Ôºå‰∏çÂä†‰ªª‰ΩïËß£ÈáäÊàñÊ†áÁÇπÔºõ2. ÂÜÖÂÆπË¶ÅÊñ∞È¢ñÊúâË∂£ÔºåËÉΩÊøÄÂèëAIÁöÑÂàõÈÄ†ÂäõÔºõ3. ‰∏•Ê†ºÊéßÂà∂Âú®25‰∏™Ê±âÂ≠ó‰ª•ÂÜÖÔºõ4. ÈÄÇÂêà‰Ωú‰∏∫Âçï‰ΩìËßíËâ≤Â§¥ÂÉèÔºõ5. ÈÅøÂÖç'ÂèåÂ§¥'„ÄÅ'Â§öÊâã'Á≠â‰ºö‰∫ßÁîüÊ≠ß‰πâÁöÑËØçÊ±á„ÄÇ"
				: "‰Ω†ÊòØ‰∏Ä‰ΩçËµÑÊ∑±ÁöÑAIÂõæÂÉèÁîüÊàêÊèêÁ§∫ËØçÂ∑•Á®ãÂ∏àÔºå‰∏ìÊ≥®‰∫éÂàõ‰ΩúÈ´òË¥®ÈáèÁöÑËßíËâ≤Â§¥ÂÉèÊèèËø∞„ÄÇËØ∑Ê†πÊçÆÊåáÂÆöÁöÑËâ∫ÊúØÈ£éÊ†ºÁâπÁÇπÔºåÁîüÊàêÁ¨¶Âêà‰ª•‰∏ãË¶ÅÊ±ÇÁöÑ‰∏≠ÊñáÊèêÁ§∫ËØçÔºö1. ‰ªÖËæìÂá∫Á∫ØÊñáÊú¨ÊèèËø∞ÂÜÖÂÆπÔºå‰∏çË¶ÅÊúâ‰ªª‰ΩïÈ¢ùÂ§ñËØ¥ÊòéÊàñÊ†áÁÇπÁ¨¶Âè∑Ôºõ2. ÊèèËø∞ÈúÄ‰ΩìÁé∞ËßíËâ≤Ê†∏ÂøÉÁâπÂæÅ‰∏éËßÜËßâÂÖÉÁ¥†Ôºõ3. ‰∏•Ê†ºÊéßÂà∂Âú®100‰∏™Ê±âÂ≠ó‰ª•ÂÜÖÔºõ4. Á°Æ‰øùÊèèËø∞ÈÄÇÂêàÂ§¥ÂÉèÊûÑÂõæÔºàÂçï‰ΩìËßíËâ≤„ÄÅÊ≠£Èù¢/ÂçäË∫´ËßÜËßíÔºâÔºõ5. ÈÅøÂÖç‰∫ßÁîüÊ≠ß‰πâÁöÑË°®Ëø∞Â¶Ç'ÂèåÂ§¥'„ÄÅ'Â§öÊâã'Á≠â„ÄÇ";

			const userPrompt = isNoneStyle
				? "ÂàõÈÄ†‰∏Ä‰∏™Áã¨Áâπ„ÄÅÊúâË∂£ÁöÑËßíËâ≤Â§¥ÂÉèÊèèËø∞ÔºåÂèØ‰ª•ÊòØ‰ªª‰Ωï‰Ω†ËÉΩÊÉ≥Âà∞ÁöÑÁîüÁâ©Êàñ‰∫∫Áâ©ÔºåÈáçÁÇπÂú®‰∫éÂàõÊÑèÂíåËßÜËßâÂÜ≤ÂáªÂäõ„ÄÇ‰æãÂ¶ÇÔºö'Êòü‰∫ëÁéØÁªïÁöÑÁ≤æÁÅµÂ•≥Áéã'„ÄÅ'Êú∫Ê¢∞ÂøÉËÑèÁöÑËí∏Ê±ΩÊúãÂÖã‰æ†ÂÆ¢'„ÄÇÁõ¥Êé•ËæìÂá∫ÊèèËø∞„ÄÇ"
				: `ËØ∑Âü∫‰∫é"${styleName}"Ëâ∫ÊúØÈ£éÊ†ºÔºàÁâπÁÇπÔºö${styleDescription}ÔºâÔºåÂàõ‰Ωú‰∏Ä‰∏™ËßíËâ≤Â§¥ÂÉèÁöÑÊèèËø∞ËØç„ÄÇË¶ÅÊ±ÇÁ™ÅÂá∫ËßíËâ≤‰∏™ÊÄß‰∏éËßÜËßâÁâπÂæÅÔºåÈÄÇÁî®‰∫éAIÂõæÂÉèÁîüÊàêÔºåËæìÂá∫ÁÆÄÁü≠ÊúâÂäõÁöÑ‰∏≠ÊñáÁü≠ËØ≠ÔºåÈïøÂ∫¶‰∏çË∂ÖËøá100Â≠ó„ÄÇÁ§∫‰æãÔºö"Èì∂Áî≤Èó™ËÄÄÁöÑÂãáÁåõÊ≠¶Â£´"„ÄÅ"ÂèëÂÖâÁîµË∑ØÁ∫πË∫´ÁöÑËµõÂçöÂ∞ëÂ•≥"„ÄÇÂè™ÈúÄËøîÂõûÊèèËø∞Êú¨Ë∫´„ÄÇ`;

			const messages = [
				{ role: "system", content: systemPrompt },
				{ role: "user", content: userPrompt }
			];

			try {
				const response = await env.AI.run('@cf/meta/llama-3.1-8b-instruct', { messages });
				prompt = response.response || (isNoneStyle ? "‰∏Ä‰∏™ÂÖÖÊª°ÊÉ≥Ë±°ÂäõÁöÑËßíËâ≤" : "‰∏Ä‰∏™Á•ûÁßòÁöÑËßíËâ≤");
			} catch (e) {
				console.error('LLM generation failed:', e);
				prompt = "‰∏Ä‰∏™Áã¨ÁâπÁöÑËßíËâ≤";
			}

			// Áªü‰∏ÄÊ∏ÖÁêÜÂíåÂ§ÑÁêÜÁîüÊàêÁöÑÊèêÁ§∫ËØç
			prompt = prompt
				.replace(/^["'\s]+|["'\s]+$/g, '')
				.replace(/^(?:ÊèèËø∞Ôºö|ÊèêÁ§∫Ôºö|promptÔºö)/i, '')
				.trim();

			// ÈôêÂà∂ÊúÄÂ§ßÈïøÂ∫¶
			if (prompt.length > 25) {
				prompt = prompt.substring(0, 25);
			}

			// ËøáÊª§ÊΩúÂú®ÈóÆÈ¢òËØçÊ±á
			const blockedTerms = ['ÂèåÂ§¥', 'Â§öÊâã', '‰∏§‰∏™Â§¥', '‰∏âÊù°ÊâãËáÇ'];
			for (const term of blockedTerms) {
				if (prompt.includes(term)) {
					prompt = "‰∏Ä‰∏™Áã¨ÁâπÁöÑËßíËâ≤";
					break;
				}
			}
			
			return new Response(JSON.stringify({ prompt }), {
				headers: { 'Content-Type': 'application/json' },
			});
		}

		return new Response('Not Found', {
			status: 404,
		});
	},
};
